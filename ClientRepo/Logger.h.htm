<!-- Published Wed Feb  7 23:42:36 2018
Yadav Murthy, CSE687 - Object Oriented Design, Spring 2017--><!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="../styles.css">
<script src = "../HideUnhide.js"></script></head>
<body>
<h3>Logger.h</h3><hr /><div class="indent"><h4>Dependencies:</h4><a href="Logger.h.htm"><label>Logger.h</label></a>
</div><hr /><pre>
#ifndef LOGGER_H
#define LOGGER_H
/////////////////////////////////////////////////////////////////////
// Logger.h - log text messages to std::ostream                    //
// ver 1.0                                                         //
//-----------------------------------------------------------------//
// Jim Fawcett (c) copyright 2015                                  //
// All rights granted provided this copyright notice is retained   //
//-----------------------------------------------------------------//
// Language:    C++, Visual Studio 2015                            //
// Application: Several Projects, CSE687 - Object Oriented Design  //
// Author:      Jim Fawcett, Syracuse University, CST 4-187        //
//              jfawcett@twcny.rr.com                              //
/////////////////////////////////////////////////////////////////////
/*
* Package Operations:
* -------------------
* This package supports logging for multiple concurrent clients to a
* single std::ostream.  It does this be enqueuing messages in a
* blocking queue and dequeuing with a single thread that writes to
* the std::ostream.
*
* Build Process:
* --------------
* Required Files: Logger.h, Logger.cpp, Utilities.h, Utilities.cpp
*
* Build Command: devenv logger.sln /rebuild debug
*
* Maintenance History:
* --------------------
* ver 1.0 : 22 Feb 2016
* - first release
*
* Planned Additions and Changes:
* ------------------------------
* - none yet
*/

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;thread&gt;
#include &quot;Cpp11-BlockingQueue.h&quot;

class Logger
<button id="Button" onClick="hideUnhideScope('104')">-</button>{<div id="104">
public:
  Logger() <button id="Button" onClick="hideUnhideScope('105')">-</button>{<div id="105"></div>}
  void attach(std::ostream* pOut);
  void start();
  void stop(const std::string&amp; msg = &quot;&quot;);
  void write(const std::string&amp; msg);
  void title(const std::string&amp; msg, char underline = &apos;-&apos;);
  ~Logger();
  Logger(const Logger&amp;) = delete;
  Logger&amp; operator=(const Logger&amp;) = delete;
private:
  std::thread* _pThr;
  std::ostream* _pOut;
  BlockingQueue&lt;std::string&gt; _queue;
  bool _ThreadRunning = false;
</div>};

template&lt;int i&gt;
class StaticLogger
<button id="Button" onClick="hideUnhideScope('106')">-</button>{<div id="106">
public:
  static void attach(std::ostream* pOut) <button id="Button" onClick="hideUnhideScope('107')">-</button>{<div id="107"> _logger.attach(pOut); </div>}
  static void start() <button id="Button" onClick="hideUnhideScope('108')">-</button>{<div id="108"> _logger.start(); </div>}
  static void stop(const std::string&amp; msg=&quot;&quot;) <button id="Button" onClick="hideUnhideScope('109')">-</button>{<div id="109"> _logger.stop(msg); </div>}
  static void write(const std::string&amp; msg) <button id="Button" onClick="hideUnhideScope('110')">-</button>{<div id="110"> _logger.write(msg); </div>}
  static void title(const std::string&amp; msg, char underline = &apos;-&apos;) <button id="Button" onClick="hideUnhideScope('111')">-</button>{<div id="111"> _logger.title(msg, underline); </div>}
  static Logger&amp; instance() <button id="Button" onClick="hideUnhideScope('112')">-</button>{<div id="112"> return _logger; </div>}
  StaticLogger(const StaticLogger&amp;) = delete;
  StaticLogger&amp; operator=(const StaticLogger&amp;) = delete;
private:
  static Logger _logger;
</div>};

template&lt;int i&gt;
Logger StaticLogger&lt;i&gt;::_logger;

#endif
</pre>
</body>
</html>
